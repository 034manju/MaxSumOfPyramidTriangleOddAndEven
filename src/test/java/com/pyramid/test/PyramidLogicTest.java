/*
 * Copyright (c) Manjunath Menashinakai. All Rights Reserved.
 *
 * This program is the information assets which are handled
 * as "Strictly Confidential".
 * Permission of use is only admitted to Manjunath Menashinakai.
 * If you don't have permission, MUST not be published,
 * broadcast, rewritten for broadcast or publication
 * or redistributed directly or indirectly in any medium.
 *
 * $ Manjunath Menashinakai $
 */
package com.pyramid.test;

import static com.pyramid.logic.IntegerConstants.ONE;
import static org.junit.Assert.assertEquals;

import org.junit.BeforeClass;
import org.junit.Test;

import com.pyramid.logic.PyramidLogic;

/**
 * Test class to find maximum sum of triangle hierarchy evens and odds
 * 
 * @author manjunath.m
 *
 */
public class PyramidLogicTest {

	private static PyramidLogic pyramidLogic;

	@BeforeClass
	public static void init() {
		pyramidLogic = new PyramidLogic();
	}

	/**
	 * test case to verify odd even hierarchy sum of 4*4 triangle
	 */
	@Test
	public void testMaxPathSumOddEven_4_4() {
		int[][] inputTriangle = { { 1, 0, 0, 0 }, 
								  { 8, 9, 0, 0 }, 
								  { 1, 5, 9, 0 }, 
								  { 4, 5, 2, 3 } 
								};

		int maxPathSumOddEven = pyramidLogic.maxPathSumOddEven(inputTriangle, inputTriangle.length - ONE,
				inputTriangle[inputTriangle.length - ONE].length);
		assertEquals(16, maxPathSumOddEven);
	}

	/**
	 * test case to verify odd even hierarchy sum of 4*4 triangle with negative values
	 */
	@Test
	public void testMaxPathSumOddEven_4_4_NegativeValues() {
		int[][] inputTriangle = { { 1, 0,  0, 0 }, 
								  { 8, 9,  0, 0 }, 
								  { 1, 5,  9, 0 }, 
								  { 4, 5, -2, 3 } 
								};

		int maxPathSumOddEven = pyramidLogic.maxPathSumOddEven(inputTriangle, inputTriangle.length - ONE,
				inputTriangle[inputTriangle.length - ONE].length);
		assertEquals(14, maxPathSumOddEven);
	}

	/**
	 * test case to verify odd even hierarchy sum of 15*15 triangle
	 */
	@Test
	public void testMaxPathSumOddEven_15_15() {
		int inputTriangle[][] = { { 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
								  { 192, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
								  { 117, 269, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
								  { 218, 836, 347, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
								  { 320, 805, 522, 417, 345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
								  { 229, 601, 728, 835, 133, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
								  { 248, 202, 277, 433, 207, 263, 257, 0, 0, 0, 0, 0, 0, 0, 0 },
								  { 359, 464, 504, 528, 516, 716, 871, 182, 0, 0, 0, 0, 0, 0, 0 },
								  { 461, 441, 426, 656, 863, 560, 380, 171, 923, 0, 0, 0, 0, 0, 0 },
								  { 381, 348, 573, 533, 448, 632, 387, 176, 975, 449, 0, 0, 0, 0, 0 },
								  { 223, 711, 445, 645, 245, 543, 931, 532, 937, 541, 444, 0, 0, 0, 0 },
								  { 330, 131, 333, 928, 376, 733, 017, 778, 839, 168, 197, 197, 0, 0, 0 },
								  { 131, 171, 522, 137, 217, 224, 291, 413, 528, 520, 227, 229, 928, 0, 0 },
								  { 223, 626, 034, 683, 839, 052, 627, 310, 713, 999, 629, 817, 410, 121, 0 },
								  { 924, 622, 911, 233, 325, 139, 721, 218, 253, 223, 107, 233, 230, 124, 233 } };
		int maxPathSumOddEven = pyramidLogic.maxPathSumOddEven(inputTriangle, inputTriangle.length - ONE,
				inputTriangle[inputTriangle.length - ONE].length);
		assertEquals(8186, maxPathSumOddEven);
	}

	/**
	 * test case to verify odd even hierarchy sum of 30*30 triangle
	 */
	@Test
	public void testMaxPathSumOddEven_30_30() {
		int inputTrianle[][] = { { 1215, 0   , 0  , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1192, 1225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1126, 1269, 1442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 2018, 1836, 1347, 1235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1320, 1805, 1522, 1417, 1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1229, 1601, 1728, 1835, 1133, 1124, 0, 0, 0, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1248, 1202, 1288, 1433, 1207, 1263, 1257, 0, 0, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1359, 1464, 1504, 1528, 1515, 1716, 1871, 1182, 0, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1461, 1441, 1426, 1656, 1863, 1560, 1380, 1171, 1923, 0, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1381, 1348, 1573, 1533, 1448, 1631, 1387, 1176, 1975, 1449, 0, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1223, 1711, 1445, 1645, 1245, 1542, 1931, 1532, 1937, 1541, 1444, 0, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1330, 1131, 1333, 1928, 1376, 1733, 1017, 1778, 1839, 1168, 1197, 1197, 0, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1131, 1171, 1522, 1137, 1217, 1224, 1291, 1413, 1528, 1520, 1227, 1229, 1928, 0,  0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1223, 1626, 1034, 1683, 1839, 1052, 1627, 1310, 1713, 1999, 1629, 1817, 1410, 1121, 0    , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1722, 1218, 1253, 1223, 1107, 1233, 1230, 1124, 1233 ,0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1138, 1721, 1218, 1253, 1223, 1107, 1233, 1230, 1124, 1233 ,1215, 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1140, 1731, 1218, 1253, 1223, 1107, 1233, 1230, 1124, 1233 ,1192, 1224, 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1253, 1223, 1107, 1233, 1230, 1124, 1233 ,1127, 1269, 1442, 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1253, 1223, 1107, 1233, 1230, 1124, 1233 ,2018, 1836, 1347, 1235, 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1244, 1223, 1107, 1233, 1230, 1124, 1233 ,1320, 1805, 1522, 1417, 1345, 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1253, 1224, 1107, 1233, 1230, 1124, 1233 ,1229, 1601, 1728, 1835, 1133, 1124, 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1234, 1223, 1107, 1233, 1230, 1124, 1233 ,1248, 1202, 1277, 1433, 1207, 1263, 1257, 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1253, 1222, 1107, 1233, 1230, 1124, 1233 ,1359, 1464, 1504, 1528, 1516, 1716, 1871, 1182, 0   , 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1288, 1223, 1107, 1233, 1230, 1124, 1233 ,1461, 1441, 1426, 1656, 1863, 1560, 1380, 1171, 1923, 0   , 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1255, 1224, 1107, 1233, 1230, 1124, 1233 ,1381, 1348, 1573, 1533, 1448, 1632, 1387, 1176, 1975, 1449, 0   , 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1244, 1223, 1107, 1233, 1230, 1124, 1233 ,1223, 1711, 1445, 1645, 1245, 1543, 1931, 1532, 1937, 1541, 1444, 0   , 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1253, 1222, 1107, 1233, 1230, 1124, 1233 ,1330, 1131, 1333, 1928, 1376, 1733, 1017, 1778, 1839, 1168, 1197, 1197, 0   , 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1282, 1223, 1107, 1233, 1230, 1124, 1233 ,1131, 1171, 1522, 1137, 1217, 1224, 1291, 1413, 1528, 1520, 1227, 1229, 1928, 0   , 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1255, 1222, 1107, 1233, 1230, 1124, 1233 ,1223, 1626, 1034, 1683, 1839, 1052, 1627, 1310, 1713, 1999, 1629, 1817, 1410, 1121, 0 },
						         { 1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1253, 1224, 1107, 1233, 1230, 1124, 1233 ,1924, 1622, 1911, 1233, 1325, 1139, 1721, 1218, 1253, 1223, 1107, 1233, 1230, 1124, 1233}
					};
		
		//max sum path for this triangle is 
		//1215,1192,1269,1836,1805,1728,1433,1528,1863,1448,1245,1376,1217,1052,1139,
		//1138,1731,1218,1253,1244,1253,1234,1253,1288,1255,1244,1253,1282,1255,1224
		int maxPathSumOddEven = pyramidLogic.maxPathSumOddEven(inputTrianle, inputTrianle.length - ONE,
				inputTrianle[inputTrianle.length - ONE].length);
		assertEquals(40471, maxPathSumOddEven);
	}
	
}
